From dbd3c269d04413deb79a72f688af77ea299d2205 Mon Sep 17 00:00:00 2001
From: Giovanni Campagna <gcampagna@src.gnome.org>
Date: Sat, 11 Dec 2010 18:05:30 +0100
Subject: [PATCH] More GObjectIntrospection fixes

Fix some annotations and add the necessary ones for new functions.

https://bugzilla.gnome.org/show_bug.cgi?id=637032
---
 libnm-glib/nm-client.c            |    5 +++--
 libnm-glib/nm-dhcp4-config.c      |    2 ++
 libnm-glib/nm-dhcp6-config.c      |    2 ++
 libnm-glib/nm-remote-connection.c |    9 +++++++++
 libnm-glib/nm-secret-agent.c      |   37 +++++++++++++++++++++++++++++++++++++
 libnm-util/nm-connection.c        |   17 +++++++++--------
 libnm-util/nm-setting-vpn.h       |    2 --
 7 files changed, 62 insertions(+), 12 deletions(-)

diff --git a/libnm-glib/nm-client.c b/libnm-glib/nm-client.c
index 4e725cf..bab86a9 100644
--- a/libnm-glib/nm-client.c
+++ b/libnm-glib/nm-client.c
@@ -1152,8 +1152,9 @@ activate_cb (DBusGProxy *proxy,
  * @client: a #NMClient
  * @connection_path: the connection's DBus path
  * @device: the #NMDevice
- * @specific_object: the device specific object (currently used only for
- * activating wireless devices and should be the #NMAccessPoint<!-- -->'s path.
+ * @specific_object: (allow-none): the device specific object (currently
+ *   used only for activating wireless devices and should be the
+ *   #NMAccessPoint<!-- -->'s path).
  * @callback: (scope async): the function to call when the call is done
  * @user_data: user data to pass to the callback function
  *
diff --git a/libnm-glib/nm-dhcp4-config.c b/libnm-glib/nm-dhcp4-config.c
index d17578a..31dfe25 100644
--- a/libnm-glib/nm-dhcp4-config.c
+++ b/libnm-glib/nm-dhcp4-config.c
@@ -169,6 +169,8 @@ nm_dhcp4_config_class_init (NMDHCP4ConfigClass *config_class)
 	 * NMDHCP4Config:options:
 	 *
 	 * The #GHashTable containing options of the configuration.
+	 *
+	 * Type: GHashTable<utf8,GValue>
 	 **/
 	g_object_class_install_property
 		(object_class, PROP_OPTIONS,
diff --git a/libnm-glib/nm-dhcp6-config.c b/libnm-glib/nm-dhcp6-config.c
index 8b85595..7e6e4f8 100644
--- a/libnm-glib/nm-dhcp6-config.c
+++ b/libnm-glib/nm-dhcp6-config.c
@@ -169,6 +169,8 @@ nm_dhcp6_config_class_init (NMDHCP6ConfigClass *config_class)
 	 * NMDHCP6Config:options:
 	 *
 	 * The #GHashTable containing options of the configuration.
+	 *
+	 * Type: GHashTable<utf8,GValue>
 	 **/
 	g_object_class_install_property
 		(object_class, PROP_OPTIONS,
diff --git a/libnm-glib/nm-remote-connection.c b/libnm-glib/nm-remote-connection.c
index 09c7112..1869a3a 100644
--- a/libnm-glib/nm-remote-connection.c
+++ b/libnm-glib/nm-remote-connection.c
@@ -480,6 +480,15 @@ nm_remote_connection_class_init (NMRemoteConnectionClass *remote_class)
 		                    G_PARAM_READABLE));
 
 	/* Signals */
+    /**
+     * NMRemoteConnection::updated:
+     * @connection: a #NMConnection
+     * @new_settings: (type GHashTable<utf8,GHashTable<utf8,GValue>>):
+     *                the updated settings
+     *
+     * This signal is emitted when a connection changes, and it is
+     * still visible to the user.
+     */
 	signals[UPDATED] = 
 		g_signal_new (NM_REMOTE_CONNECTION_UPDATED,
 		              G_TYPE_FROM_CLASS (remote_class),
diff --git a/libnm-glib/nm-secret-agent.c b/libnm-glib/nm-secret-agent.c
index 72431e2..9cc2440 100644
--- a/libnm-glib/nm-secret-agent.c
+++ b/libnm-glib/nm-secret-agent.c
@@ -567,6 +567,20 @@ auto_register_cb (gpointer user_data)
 
 /**************************************************************/
 
+/**
+ * nm_secret_agent_get_secrets:
+ * @self: a #NMSecretAgent
+ * @connection: the #NMConnection for which we're asked secrets
+ * @setting_name: the name of the secret setting
+ * @hints: (array zero-terminated=1): hints to the agent
+ * @flags:
+ * @callback: (scope async): a callback, invoked when the operation is done
+ * @callback_data: (closure):
+ *
+ * Asyncronously retrieve @setting_name from @connection
+ *
+ * VFunc: get_secrets
+ */
 void
 nm_secret_agent_get_secrets (NMSecretAgent *self,
                              NMConnection *connection,
@@ -595,6 +609,18 @@ nm_secret_agent_get_secrets (NMSecretAgent *self,
 	                                               callback_data);
 }
 
+/**
+ * nm_secret_agent_save_secrets:
+ * @self: a #NMSecretAgent
+ * @connection: a #NMConnection
+ * @callback: (scope async): a callback, invoked when the operation is done
+ * @callback_data: (closure):
+ *
+ * Asyncronously ensure that all secrets inside @connection
+ * are stored to disk.
+ *
+ * VFunc: save_secrets
+ */
 void
 nm_secret_agent_save_secrets (NMSecretAgent *self,
                               NMConnection *connection,
@@ -614,6 +640,17 @@ nm_secret_agent_save_secrets (NMSecretAgent *self,
 	                                                callback_data);
 }
 
+/**
+ * nm_secret_agent_delete_secrets:
+ * @self: a #NMSecretAgent
+ * @connection: a #NMConnection
+ * @callback: (scope async): a callback, invoked when the operation is done
+ * @callback_data: (closure):
+ *
+ * Asyncronously remove all secret settings from @connection
+ *
+ * VFunc: delete_secrets
+ */
 void
 nm_secret_agent_delete_secrets (NMSecretAgent *self,
                                 NMConnection *connection,
diff --git a/libnm-util/nm-connection.c b/libnm-util/nm-connection.c
index ec33907..aef1cc0 100644
--- a/libnm-util/nm-connection.c
+++ b/libnm-util/nm-connection.c
@@ -493,7 +493,7 @@ validate_permissions_type (GHashTable *hash, GError **error)
 /**
  * nm_connection_replace_settings:
  * @connection: a #NMConnection
- * @new_settings: (element-type utf8 GLib.HashTable): a #GHashTable of settings
+ * @new_settings: (element-type utf8 GHashTable<utf8,GValue>): a #GHashTable of settings
  * @error: location to store error, or %NULL
  *
  * Returns: %TRUE if the settings were valid and added to the connection, %FALSE
@@ -728,11 +728,12 @@ add_setting_to_list (gpointer key, gpointer data, gpointer user_data)
 /**
  * nm_connection_need_secrets:
  * @connection: the #NMConnection
- * @hints: the address of a pointer to a #GPtrArray, initialized to NULL, which
- * on return points to an allocated #GPtrArray containing the property names of
- * secrets of the #NMSetting which may be required; the caller owns the array
- * and must free the each array element with g_free(), as well as the array
- * itself with g_ptr_array_free()
+ * @hints: (out callee-allocates) (element-type utf8) (allow-none) (transfer full):
+ *   the address of a pointer to a #GPtrArray, initialized to NULL, which on
+ *   return points to an allocated #GPtrArray containing the property names of
+ *   secrets of the #NMSetting which may be required; the caller owns the array
+ *   and must free the each array element with g_free(), as well as the array
+ *   itself with g_ptr_array_free()
  *
  * Returns the name of the first setting object in the connection which would
  * need secrets to make a successful connection.  The returned hints are only
@@ -741,7 +742,7 @@ add_setting_to_list (gpointer key, gpointer data, gpointer user_data)
  * secrets are needed.
  *
  * Returns: the setting name of the #NMSetting object which has invalid or
- * missing secrets
+ *   missing secrets
  **/
 const char *
 nm_connection_need_secrets (NMConnection *connection,
@@ -821,7 +822,7 @@ nm_connection_clear_secrets (NMConnection *connection)
  * are #GHashTables mapping string:GValue, each of which represents the
  * properties of the #NMSetting object.
  *
- * Returns: (transfer full) (element-type utf8 GLib.HashTable): a new 
+ * Returns: (transfer full) (element-type utf8 GHashTable<utf8,GValue>): a new
  * #GHashTable describing the connection, its settings, and each setting's
  * properties.  The caller owns the hash table and must unref the hash table
  * with g_hash_table_unref() when it is no longer needed.
diff --git a/libnm-util/nm-setting-vpn.h b/libnm-util/nm-setting-vpn.h
index bb20356..6ff1928 100644
--- a/libnm-util/nm-setting-vpn.h
+++ b/libnm-util/nm-setting-vpn.h
@@ -72,8 +72,6 @@ typedef struct {
 } NMSettingVPNClass;
 
 typedef void (*NMVPNIterFunc) (const char *key, const char *value, gpointer user_data);
-/* For backward compatibility */
-typedef NMVPNIterFunc VPNIterFunc;
 
 GType nm_setting_vpn_get_type (void);
 
-- 
1.7.4