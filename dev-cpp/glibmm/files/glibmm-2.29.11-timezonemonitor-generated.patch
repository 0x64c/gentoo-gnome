--- a/glib/glibmm/timezone.cc
+++ b/glib/glibmm/timezone.cc
@@ -117,13 +117,6 @@
   return Glib::wrap(g_time_zone_new_utc());
 }
 
-
-void TimeZone::refresh_local()
-{
-g_time_zone_refresh_local();
-}
-
-
 int TimeZone::find_interval(TimeType type, gint64 time) const
 {
   return g_time_zone_find_interval(const_cast<GTimeZone*>(gobj()), ((GTimeType)(type)), time);
--- a/glib/glibmm/timezone.h
+++ b/glib/glibmm/timezone.h
@@ -160,23 +160,6 @@
    */
   static TimeZone create_utc();
 
-  
-  /** Notifies TimeZone that the local timezone may have changed.
-   * 
-   * In response, TimeZone will drop its cache of the local time zone.
-   * No existing TimeZone will be modified and no DateTime will change
-   * its timezone but future calls to g_time_zone_new_local() will start
-   * returning the new timezone.
-   * 
-   * TimeZone does no monitoring of the local timezone on its own, which
-   * is why you have to call this function to notify it of the change.
-   * 
-   * If you use TimeZoneMonitor to watch for changes then this function
-   * will automatically be called for you.
-   */
-  static void refresh_local();
-
-  
   /** Finds an the interval within @a tz that corresponds to the given @a time.
    * The meaning of @a time depends on @a type.
    * 
